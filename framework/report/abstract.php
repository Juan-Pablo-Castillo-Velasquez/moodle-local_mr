<?php
/**
 * Report plugin abstraction
 *
 * @author Mark Nielsen
 * @version $Id$
 * @package blocks/reports
 **/

require_once($CFG->dirroot.'/local/mr/framework/html/table.php');
require_once($CFG->dirroot.'/local/mr/framework/filter.php');
require_once($CFG->dirroot.'/local/mr/framework/var.php');
require_once($CFG->dirroot.'/local/mr/framework/preferences.php');

abstract class block_reports_plugin_report_base_class {
    /**
     * Table model
     *
     * @var mr_html_table
     */
    protected $table;

    /**
     * Filter model
     *
     * @var block_reports_model_filter
     */
    protected $filter = false;

    /**
     * User preferences
     *
     * @var block_reports_model_preferences
     */
    protected $preferences;

    /**
     * Helper Model
     *
     * @var mr_helper
     */
    protected $helper;

    /**
     * Config Model
     *
     * @var mr_var
     */
    protected $config;

    /**
     * Base URL
     *
     * @var moodle_url
     */
    protected $url;

    /**
     * Course ID
     *
     * @var int
     */
    protected $courseid;

    /**
     * Export plugin
     *
     * @var block_reports_plugin_export_base_class
     */
    protected $export;

    /**
     * The current iterator value
     *
     * @var object
     */
    protected $iterator;

    /**
     * SQL generated by this report
     *
     * @var string
     */
    protected $sql = '';

    /**
     * Global AJAX default config
     *
     * @var int
     */
    static public $ajaxdefault = NULL;

    /**
     * Construct
     *
     * @param moodle_url $url Base URL
     * @param int $courseid Course ID
     */
    public function __construct($url = NULL, $courseid = NULL) {
        global $CFG;

        if (is_null($courseid) or $courseid == 0) {
            $courseid = SITEID;
        }

        // Grab ajaxdefault config
        if (is_null(self::$ajaxdefault)) {
            if ((self::$ajaxdefault = get_config('blocks/reports', 'ajaxdefault')) === false) {
                self::$ajaxdefault = 1;
            }
        }

        $this->url         = $url;
        $this->courseid    = $courseid;
        $this->helper      = new mr_helper('blocks/reports');
        $this->config      = new mr_var();
        $this->preferences = new block_reports_model_preferences($courseid, $this->plugin_name());

        if (($setajax = optional_param('setajax', -1, PARAM_INT)) != -1) {
            $this->preferences->set('ajax', $setajax);
        }

        // Setup config defaults
        $this->config->set(array(
            'sitereport' => true,            // Has a site level report
            'coursereport' => true,          // Has a course level report
            'coursemanagerreport' => true,   // Is a course manager report
            'embeddedreport' => false,       // Is an embedded report (EG: displayed in another plugin)
            'cansubscribe' => true,          // Users can subscribe to this report
            'controlpanel' => false,         // Control panel requirements, EG: array('notify', '_MR_BLOCKS')
            'reportsgroup' => false,         // The report group that the report belongs, EG: 'Site Engagement', 'Course Engagement'
            'cache' => false,                // Enable report caching
            'ajax' => false,                 // Allow AJAX table view
            'export' => false,               // Export options, an array of export formats or true for all
            'maxrows' => 65000,              // The maximum number of rows the report can report on
            'perpage' => false,              // Can the page size be changed?
            'perpageopts' => array(          // Page size options
                'all', 10, 25, 50, 100, 200, 500, 1000,
            ),
        ));
        $this->config_init();

        // Override settings based on other global settings
        $this->config->ajax = ($this->config->ajax and ajaxenabled());

        if (!empty($CFG->block_reports_maxrows)) {
            $this->config->maxrows = $CFG->block_reports_maxrows;
        }
    }

    /**
     * Convert this report into a simple string
     *
     * @return string
     */
    public function __toString() {
        global $USER;

        $this->table_init();
        $this->filter_init();

        $report = $this->plugin_name();

        return "user{$USER->id}course{$this->courseid}report{$report}$this->table$this->filter";
    }

    /**
     * Set report specific configs
     *
     * @return void
     */
    public function config_init() {
    }

    /**
     * Get the reports config
     *
     * @return object
     */
    public function get_config() {
        return $this->config;
    }

    /**
     * Does this report have a report for the passed course
     * and can the current user view the report
     *
     * @param int $courseid Course ID
     * @param int $userid The user to check against
     * @param boolean $allowembedded Allow the report to be an embedded report
     * @return boolean
     */
    public function has_report($courseid = NULL, $userid = NULL, $allowembedded = false) {
        global $USER;

        // Control panel check first
        if ($this->config->controlpanel) {
            if (is_callable('mr_on') and !mr_on($this->config->controlpanel[0], $this->config->controlpanel[1])) {
                return false;
            }
        }
        if (!$this->can_access()) {
            return false;
        }
        if ($allowembedded and $this->config->embeddedreport) {
            return true;
        }
        if (is_null($courseid)) {
            $courseid = $this->courseid;
        }
        if (is_null($userid)) {
            $userid = $USER->id;
        }
        if ($courseid == SITEID) {
            if (!$this->config->sitereport) {
                return false;
            }
        } else if (!$this->config->coursereport) {
            return false;
        }
        if (!has_capability('moodle/site:doanything', get_context_instance(CONTEXT_SYSTEM, SITEID), $userid)) {
            if ($this->config->coursemanagerreport) {
                return $this->helper->manager($userid);
            }
        }
        return true;
    }

    /**
     * If a report needs to enforce any capability or access
     * rules, then do them here
     *
     * This function definition needs to be very robust so it can
     * handle calls from AJAX requests
     *
     * @return boolean
     */
    public function can_access() {
        return true;
    }

    /**
     * Can this report be subscribed to?
     *
     * @return boolean
     */
    public function can_subscribe() {
        return $this->config->cansubscribe;
    }

    /**
     * Report display
     *
     * @return string
     */
    public function display() {
        // Filter setup
        $this->filter_init();

        if (($chart = optional_param('chart', 'none', PARAM_SAFEDIR)) != 'none' and ajaxenabled()) {
            // Display a chart instead of the report
            $plugin  = $this->load_chart($chart);
            $display = $plugin->display();  // Loads SQL for sql_display()

            return $this->error_display().
                   $plugin->sql_display().
                   $this->desciption_display().
                   $this->filter_display().
                   $this->chart_display().
                   $display;
        }
        // Table setup
        $this->table_init();

        // Only fill table when not using ajax
        if (!$this->table instanceof mr_html_table_ajax) {
            $this->table_fill();
        }

        // Display everything
        return $this->error_display().
               $this->sql_display().
               $this->navigation_display().
               $this->desciption_display().
               $this->filter_display().
               $this->chart_display().
               $this->table_display().
               $this->export_display().
               $this->ajax_display();
    }

    /**
     * Display any errors via SESSION
     *
     * @return string
     */
    public function error_display() {
        global $SESSION;

        $return = '';
        if (!empty($SESSION->block_reports_errormessage)) {
            $return = notify($SESSION->block_reports_errormessage, 'notifyproblem', 'center', true);
            unset($SESSION->block_reports_errormessage);
        }
        return $return;
    }

    /**
     * Display the reports SQL
     *
     * @param string $sql Override what SQL is printed (Charts call this method)
     * @return string
     */
    public function sql_display($sql = NULL) {
        global $CFG, $USER;

        if (is_null($sql)) {
            $sql = $this->sql;
        }
        if ($this->helper->reportsql() and !empty($sql)) {
            $lines = explode("\n", $sql);
            $sql   = array();
            foreach ($lines as $line) {
                // $line = trim($line); Bad idea ?
                if (!empty($line)) {
                    $sql[] = $line;
                }
            }
            $sql = implode("\n", $sql);
            $sql = str_replace(' ORDER BY', 'ORDER BY', $sql);
            $sql = trim($sql);

            if (file_exists($CFG->dirroot.'/filter/geshi/filter.php')) {
                require_once($CFG->dirroot.'/filter/geshi/filter.php');
                $sql = geshi_filter(SITEID, "[code sql] \n$sql [/code]").'<br />';
            } else {
                $sql = "<pre>$sql</pre>";
            }

            return print_box_start('generalbox boxwidthwide boxaligncenter blockreportsql', '', true).
                   print_heading(get_string('reportsql', 'block_reports'), '', 4, 'main', true).
                   $sql.
                   print_box_end(true);
        }
    }

    /**
     * Display toggle link for going from Basic HTML
     * table to AJAX table
     *
     * @return string
     */
    public function ajax_display() {
        if ($this->config->ajax) {
            if ($this->preferences->get('ajax', self::$ajaxdefault)) {
                $newajax = 0;
                $label   = get_string('basichtml', 'block_reports');
            } else {
                $newajax = 1;
                $label   = get_string('standard', 'block_reports');
            }
            $title = s($label);
            $url   = $this->url->out(false, array('setajax' => $newajax));

            return "<p class=\"toggleajax\"><a href=\"$url\" title=\"$title\">$label</a></p>";
        }
        return '';
    }

    public function navigation_display() {
        $treeview_enabled = get_config('blocks/reports', 'enabletreeview');
        if (!empty($treeview_enabled) and ajaxenabled()) {
            return $this->helper->navbuttons($this, $this->courseid);
        }
        return '';
    }

    /**
     * Generate JSON data for this report
     *
     * @return string
     */
    public function json() {
        if ($this->config->ajax and $this->preferences->get('ajax', self::$ajaxdefault)) {
            // Filter setup first
            $this->filter_init();

            // Table setup and fill
            $this->table_init();
            $this->table_fill();

            if (!$this->table instanceof mr_html_table_ajax) {
                throw new block_reports_exception('Invalid table model');
            }

            return $this->table->json();
        }
        return '';
    }

    /**
     * YUI inline cell editing - this gets called to save
     * the edited data.
     *
     * Also perform any additional capability checks in this method!
     *
     * @param object $row Table row data - THIS MUST BE CLEANED BEFORE USE!
     * @param string $column The column that was edited
     * @param string $value The new column value, THIS MUST BE CLEANED BEFORE SAVING!
     * @return mixed Return false on error, return value saved to DB on success,
     *               or return a JSON object (see editcell_action in default controller)
     */
    public function save_cell($row, $column, $value) {
        return false;
    }

    /**
     * Export report
     *
     * @param block_reports_plugin_export_base_class $plugin The export plugin to use - the
     *                                                       export plugin is expected to already
     *                                                       be setup and ready to use
     * @return void
     */
    public function export($plugin) {
        // Store locally if needed
        $this->export = $plugin;

        // Filter and table setup
        $this->filter_init();
        $this->table_init();

        // Setup table for export, send all records to export plugin
        $this->table->set_perpage(0)
                    ->set_export($plugin);

        // Send rows to export plugin
        $this->table_fill();
    }

    /**
     * Display report export options
     *
     * @return string
     */
    public function export_display() {
        global $CFG;

        if ($this->config->export !== false) {
            $plugins = block_reports_plugin::load('export');

            if (is_array($this->config->export)) {
                foreach ($plugins as $type => $plugin) {
                    if (!in_array($type, $this->config->export)) {
                        unset($plugins[$type]);
                    }
                }
            }
            if (!empty($plugins)) {
                $options = array();
                foreach ($plugins as $plugin) {
                    $options[$plugin->plugin_name()] = $plugin->name();
                }
                $returnurl = urlencode($this->url->out());

                return print_box_start('exportbox boxwidthwide boxaligncenter centerpara', '', true).
                       popup_form($CFG->wwwroot.'/blocks/reports/view.php?action=export&amp;report='.$this->plugin_name()."&amp;courseid=$this->courseid&amp;returnurl=$returnurl&amp;export=",
                           $options, 'exportformid', '', get_string('formatdotdotdot', 'block_reports'), '', '', true,
                           'self', get_string('export', 'block_reports')).
                       print_box_end(true);
            }
        }
        return '';
    }

    /**
     * Display chart picker for viewing different charts
     *
     * @return string
     */
    public function chart_display() {
        if (ajaxenabled()) {
            try {
                $charts = $this->helper->load('plugin/report/'.$this->plugin_name().'/chart/*', array($this));
                if (!empty($charts)) {
                    $options = array('none' => get_string('tabularreport', 'block_reports'));
                    foreach ($charts as $chart) {
                        $options[$chart->plugin_name()] = $chart->name();
                    }
                    return print_box_start('chartbox boxwidthwide boxaligncenter', '', true).
                           popup_form($this->url->out().'&amp;chart=', $options, 'chartformid',
                               optional_param('chart', 'none', PARAM_SAFEDIR), '', '', '', true,
                               'self', get_string('displayas', 'block_reports')).
                           print_box_end(true);
                }
            } catch (block_reports_exception $e) {
                // Don't care
            }
        }
        return '';
    }

    /**
     * Load a chart
     *
     * @param string $chart The chart file name to load
     * @return block_reports_plugin_report_base_chart_abstract
     */
    public function load_chart($chart) {
        return $this->helper->load('plugin/report/'.$this->plugin_name()."/chart/$chart", array($this));
    }

    /**
     * Get report description text
     *
     * @return mixed
     */
    public function description_text() {
        $identifier  = $this->plugin_type().'-'.$this->plugin_name().'-description';
        $description = get_string($identifier, $this->stringmodule);

        if (!empty($description) and $description != "[[$identifier]]") {
            return $description;
        }
        return false;
    }

    /**
     * Display report description
     *
     * @return string
     */
    public function desciption_display() {
        if ($description = $this->description_text()) {
            return print_box($description, 'generalbox boxwidthnormal boxaligncenter reportdescription', '', true);
        }
        return '';
    }

    /**
     * Set the iterator value
     *
     * @param object $iterator Based on the iterator report
     * @return void
     */
    public function iterator_init($iterator) {
        $this->iterator = $iterator;
    }

    /**
     * Filter setup - override to add a filter
     *
     * @return void
     */
    public function filter_init() {
        if (empty($this->filter)) {
            if ($this->courseid == SITEID) {
                $this->filter_site_init();
            } else {
                $this->filter_course_init();
            }
        }
    }

    /**
     * Site filter setup
     *
     * @return void
     */
    public function filter_site_init() {}

    /**
     * Course filter setup
     *
     * @return void
     */
    public function filter_course_init() {
        $this->filter = new block_reports_model_filter($this->preferences, $this->url);
        $this->filter->new_hidden('course_id', $this->courseid, 'c.id');
    }

    /**
     * Generate SQL from filter
     *
     * @return string
     */
    public function filter_sql() {
        if ($this->filter) {
            return $this->filter->sql();
        }
        return '';
    }

    /**
     * Display the filter form
     *
     * @return string
     */
    public function filter_display() {
        if ($this->filter) {
            return $this->helper->buffer(array($this->filter, 'display'));
        }
        return '';
    }

    /**
     * Create a new table model - will create an AJAX table
     * model if the report, user and site settings allow it
     *
     * @param string $sort Default sort column
     * @param int $order Default sort order
     * @return void
     */
    public function table_new($sort = '', $order = SORT_ASC) {
        if ($this->config->ajax and $this->preferences->get('ajax', self::$ajaxdefault)) {
            $this->table = new mr_html_table_ajax($this->preferences, $this->url, $sort, $order);
        } else {
            $this->table = new mr_html_table($this->preferences, $this->url, $sort, $order);
        }
        return $this->table;
    }

    /**
     * Table setup
     *
     * @return mr_html_table
     */
    public function table_init() {
        if (!$this->table instanceof mr_html_table) {
            if ($this->courseid == SITEID) {
                $this->table_site_init();
            } else {
                $this->table_course_init();
            }
            if (!$this->table instanceof mr_html_table) {
                throw new block_reports_exception('Programmer error: table is not defined correctly');
            }
            if ($this->config->perpage) {
                $this->table->set_perpageopts($this->config->perpageopts);
            }
            if ($this->config->cache) {
                $this->table->set_cachekey((string) $this);
            }
        }
        return $this->table;
    }

    /**
     * Site table setup
     *
     * @return void
     */
    public function table_site_init() {}

    /**
     * Course table setup
     *
     * @return void
     */
    public function table_course_init() {
        // Default to site
        $this->table_site_init();
    }

    /**
     * Set the per page value of the report
     *
     * @param int $perpage The number of rows to dispay per page
     * @return void
     */
    public function table_perpage($perpage) {
        $this->table_init()->set_perpage($perpage);
    }

    /**
     * Fill table with data
     *
     * @return void
     */
    public function table_fill() {
        $this->table_init();

        if (!$this->config->cache or !$this->table->cached()) {
            $total = $this->get_recordset_count($this->filter_sql());

            if ($this->config->maxrows == 0 or $total <= $this->config->maxrows) {
                $rs = $this->get_recordset(
                    $this->filter_sql(),
                    $this->get_sql_sort(),
                    $this->table->get_limitfrom(),
                    $this->table->get_limitnum()
                );
                if ($rs) {
                    while ($row = rs_fetch_next_record($rs)) {
                        $this->table_fill_row($row);
                    }
                    rs_close($rs);

                    if ($this->table->get_perpage() > 0) {
                        $this->table->set_total($total);
                    }
                }
            } else {
                $this->table->set_emptymessage(
                    get_string('toomanyrows', 'block_reports', (object) array('total' => $total, 'max' => $this->config->maxrows))
                );
            }
        }
    }

    /**
     * Add a row to the table
     *
     * @param mixed $row The row to add
     * @return void
     */
    public function table_fill_row($row) {
        $this->table_init()->add_row($row);
    }

    /**
     * Table display
     *
     * @return void
     */
    public function table_display() {
        $this->table_init();

        return $this->table->html_perpage().
               $this->table->html().
               $this->table->html_perpage();
    }

    /**
     * Get the recordset to the data for the report
     *
     * @param string $filter Filter SQL
     * @param string $sort Sort SQL
     * @param string $limitfrom Limit from SQL
     * @param string $limitnum Limit number SQL
     * @return recordset
     */
    public function get_recordset($filter = '', $sort = '', $limitfrom = '', $limitnum = '') {
        if (!$sqlbody = $this->get_sql_body() or !$sqlselect = $this->get_sql_select()) {
            return false;
        }
        $sqlgroupby = $this->get_sql_groupby();
        $sql        = "SELECT $sqlselect\n$sqlbody\n$filter\n$sqlgroupby\n$sort";
        $this->sql  = "$sql\nlimit $limitfrom, $limitnum";

        return get_recordset_sql($sql, $limitfrom, $limitnum);
    }

    /**
     * Count the total number of records
     * that are included in the report
     *
     * @param string $filter Filter SQL
     * @return int
     */
    public function get_recordset_count($filter = '') {
        if (!$sqlbody = $this->get_sql_body()) {
            return 0;
        }
        $sqlgroupby = $this->get_sql_groupby();

        if (empty($sqlgroupby)) {
            $sql = "SELECT COUNT(*) $sqlbody$filter$sqlgroupby";
        } else {
            $sql = "SELECT COUNT(*) FROM (SELECT COUNT(*) $sqlbody$filter$sqlgroupby) t";
        }
        return count_records_sql($sql);
    }

    /**
     * Define the SQL select fields for the report
     *
     * @return string
     */
    public function get_sql_select() {
        return $this->table_init()->get_sql_select();
    }

    /**
     * Define the body of the SQL query, start with FROM
     *
     * @return string
     */
    public function get_sql_body() {
        return '';
    }

    /**
     * If groupby is needed, override this method.
     * Do not add groupby to your get_sql_body()
     *
     * Return a string like: ' GROUP BY fieldname'
     *
     * @return string
     */
    public function get_sql_groupby() {
        return '';
    }

    /**
     * Get sorting SQL
     *
     * @return string
     */
    public function get_sql_sort() {
        return $this->table_init()->get_sql_sort();
    }
}